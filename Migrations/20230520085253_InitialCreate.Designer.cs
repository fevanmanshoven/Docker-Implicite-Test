// <auto-generated />
using System;
using ImpliciteTesterServer.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImpliciteTesterServer.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20230520085253_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("CategoryImageUpload", b =>
                {
                    b.Property<int>("CategoriesCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageUploadsImageUploadId")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoriesCategoryId", "ImageUploadsImageUploadId");

                    b.HasIndex("ImageUploadsImageUploadId");

                    b.ToTable("CategoryImageUpload");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("CategoryId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestId1");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = -1,
                            Name = "Mannen"
                        },
                        new
                        {
                            CategoryId = -2,
                            Name = "Vrouwen"
                        },
                        new
                        {
                            CategoryId = -3,
                            Name = "Jong"
                        },
                        new
                        {
                            CategoryId = -4,
                            Name = "Oud"
                        },
                        new
                        {
                            CategoryId = -5,
                            Name = "Positive"
                        },
                        new
                        {
                            CategoryId = -6,
                            Name = "Negative"
                        });
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.FaceReader", b =>
                {
                    b.Property<int>("FaceReaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("FaceReaderId");

                    b.ToTable("FaceReaders");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.FaceReaderData", b =>
                {
                    b.Property<int>("FaceReaderDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Angry")
                        .HasColumnType("REAL");

                    b.Property<double>("Contempt")
                        .HasColumnType("REAL");

                    b.Property<double>("Disgusted")
                        .HasColumnType("REAL");

                    b.Property<int?>("FaceReaderId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Happy")
                        .HasColumnType("REAL");

                    b.Property<double>("Neutral")
                        .HasColumnType("REAL");

                    b.Property<double>("Sad")
                        .HasColumnType("REAL");

                    b.Property<double>("Scared")
                        .HasColumnType("REAL");

                    b.Property<double>("Surprised")
                        .HasColumnType("REAL");

                    b.Property<int>("Time")
                        .HasColumnType("INTEGER");

                    b.HasKey("FaceReaderDataId");

                    b.HasIndex("FaceReaderId");

                    b.ToTable("FaceReaderData");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Fase", b =>
                {
                    b.Property<int>("FaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FaseType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImgAmount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FaseId");

                    b.HasIndex("TestId");

                    b.ToTable("Fases");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.FaseTypeImage", b =>
                {
                    b.Property<int>("FaseTypeImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FaseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FaseType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FaseTypeImageId");

                    b.HasIndex("FaseId");

                    b.HasIndex("ImageId");

                    b.ToTable("FaseTypeImages");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ImageUploadId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ImageId");

                    b.HasIndex("ImageUploadId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.ImageUpload", b =>
                {
                    b.Property<int>("ImageUploadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TestId1")
                        .HasColumnType("INTEGER");

                    b.HasKey("ImageUploadId");

                    b.HasIndex("TestId");

                    b.HasIndex("TestId1");

                    b.ToTable("ImageUploads");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FaceReaderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Participant")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TestId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TimeLineResult")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ResultId");

                    b.HasIndex("FaceReaderId");

                    b.HasIndex("TestId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TestId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("CategoryImageUpload", b =>
                {
                    b.HasOne("ImpliciteTesterServer.Data.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImpliciteTesterServer.Data.ImageUpload", null)
                        .WithMany()
                        .HasForeignKey("ImageUploadsImageUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Category", b =>
                {
                    b.HasOne("ImpliciteTesterServer.Data.Test", null)
                        .WithMany("NegCategories")
                        .HasForeignKey("TestId");

                    b.HasOne("ImpliciteTesterServer.Data.Test", null)
                        .WithMany("PosCategories")
                        .HasForeignKey("TestId1");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.FaceReaderData", b =>
                {
                    b.HasOne("ImpliciteTesterServer.Data.FaceReader", null)
                        .WithMany("FaceReaderDatas")
                        .HasForeignKey("FaceReaderId");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Fase", b =>
                {
                    b.HasOne("ImpliciteTesterServer.Data.Test", null)
                        .WithMany("Fases")
                        .HasForeignKey("TestId");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.FaseTypeImage", b =>
                {
                    b.HasOne("ImpliciteTesterServer.Data.Fase", "Fase")
                        .WithMany("FaseTypeImages")
                        .HasForeignKey("FaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImpliciteTesterServer.Data.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fase");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Image", b =>
                {
                    b.HasOne("ImpliciteTesterServer.Data.ImageUpload", "ImageUpload")
                        .WithMany("Images")
                        .HasForeignKey("ImageUploadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageUpload");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.ImageUpload", b =>
                {
                    b.HasOne("ImpliciteTesterServer.Data.Test", null)
                        .WithMany("NegImageUploads")
                        .HasForeignKey("TestId");

                    b.HasOne("ImpliciteTesterServer.Data.Test", null)
                        .WithMany("PosImageUploads")
                        .HasForeignKey("TestId1");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Result", b =>
                {
                    b.HasOne("ImpliciteTesterServer.Data.FaceReader", "FaceReader")
                        .WithMany()
                        .HasForeignKey("FaceReaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImpliciteTesterServer.Data.Test", "Test")
                        .WithMany("Results")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FaceReader");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.FaceReader", b =>
                {
                    b.Navigation("FaceReaderDatas");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Fase", b =>
                {
                    b.Navigation("FaseTypeImages");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.ImageUpload", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("ImpliciteTesterServer.Data.Test", b =>
                {
                    b.Navigation("Fases");

                    b.Navigation("NegCategories");

                    b.Navigation("NegImageUploads");

                    b.Navigation("PosCategories");

                    b.Navigation("PosImageUploads");

                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
